from datetime import date, timedelta, datetime

from telebot.types import Message, CallbackQuery
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP

from config_data.config import KeyboardStatus
from hotel_api.api_request import parse_destinations, find_hotels
from keyboards.inline.calendar import arrival_keyboard, departure_keyboard
from keyboards.inline.clarify_destination import keyboard_with_destinations
from keyboards.reply.hotels_photos import show_photos_or_not
from loader import bot
from states.user import UserInfoHighPriceState


@bot.message_handler(commands=['highprice'])
def highprice(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞—é—â–∏–π –∫–æ–º–∞–Ω–¥—É "/highprice"
    :param message: (Message) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π "/highprice".
    """
    bot.set_state(message.from_user.id, UserInfoHighPriceState.cityHigh, message.chat.id)
    bot.send_message(message.from_user.id, 'üèòÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:')


@bot.message_handler(state=UserInfoHighPriceState.cityHigh)
def get_city(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é "cityHigh"
    (–≥–æ—Ä–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω –≤–≤—ë–ª –¥–æ —ç—Ç–æ–≥–æ).
    –¢—É—Ç –∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞, –∞ —Ç–∞–∫ –∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
    :param message: (Message) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ–º –≥–æ—Ä–æ–¥–∞.
    """
    bot.set_state(message.from_user.id, UserInfoHighPriceState.destinationHigh, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['city'] = message.text
        data['user_id'] = message.from_user.id
        data['user_command'] = '/highprice'
        data['request_date'] = datetime.now()
        destinations_ids = parse_destinations(message.text)
        if destinations_ids:
            bot.send_message(message.from_user.id, 'ü§î –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:',
                             reply_markup=keyboard_with_destinations(destinations_ids, fltr='highprice'))
        else:
            bot.send_message(message.from_user.id, '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æüíÄ\n'
                                                   '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.')


@bot.callback_query_handler(func=lambda call: call.data.startswith('highprice'))
def get_destination(call: CallbackQuery) -> None:
    """
    –ö–æ–ª–±—ç–∫ —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    –î–∞–ª–µ–µ –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ call –∏ –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π.
    :param call: (CallbackQuery) —Å–∞–º–æ –Ω–∞–∂–∞—Ç–∏–µ –≤ –∫–æ—Ç–æ—Ä–æ–º –ª–µ–∂–∏—Ç ".data" —Å destinationID.
    """
    bot.set_state(call.message.chat.id, UserInfoHighPriceState.hotels_to_showHigh)
    bot.send_message(call.message.chat.id, 'üè® –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π: ')
    with bot.retrieve_data(call.message.chat.id) as data:
        data['destinationID'] = call.data.replace('highprice_', '')


@bot.message_handler(state=UserInfoHighPriceState.hotels_to_showHigh)
def get_hotels_to_show(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–ª–æ–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é "hotels_to_showHigh".
    –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ–≥–æ,
    –ø–æ—Å–ª–µ —á–µ–≥–æ –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –ø—Ä–∏–µ–∑–¥–∞ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    :param message: (Message) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–µ–ª–µ–π.
    """
    if message.text.isdigit():
        if int(message.text) > 10:
            bot.send_message(message.from_user.id, 'üò¢ –Ø –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ –Ω–µ –±–æ–ª–µ–µ 10 –æ—Ç–µ–ª–µ–π..')
        else:
            bot.set_state(message.from_user.id, UserInfoHighPriceState.arrival_dateHigh)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['hotels_to_show'] = int(message.text)
            bot.send_message(message.from_user.id, 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–µ–∑–¥–∞', reply_markup=arrival_keyboard(
                keyboard_id=KeyboardStatus.highprice_arrival.value))
    else:
        bot.send_message(message.from_user.id, 'üò° –¶–∏—Ñ—Ä–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!')


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=KeyboardStatus.highprice_arrival.value))
def get_arrival_date(call: CallbackQuery) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ id=3.
    –î–∞–ª–µ–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ –ø—Ä–∏–µ–∑–¥–∞, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –¥–∞—Ç–µ –≤—ã–µ–∑–¥–∞
    –∏ –≤—ã–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    :param call: (CallbackQuery) –∫–æ–ª–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–∞—Ç–µ –ø—Ä–∏–µ–∑–¥–∞.
    """
    bot.set_state(call.message.chat.id, UserInfoHighPriceState.departure_dateHigh)
    result, key, step = DetailedTelegramCalendar(calendar_id=KeyboardStatus.highprice_arrival.value,
                                                 current_date=date.today(),
                                                 min_date=date.today(),
                                                 max_date=date.today() + timedelta(days=365),
                                                 locale="ru").process(call.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    else:
        with bot.retrieve_data(call.message.chat.id) as data:
            data['arrival_date'] = result
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞',
                         reply_markup=departure_keyboard(call, keyboard_id=KeyboardStatus.highprice_departure.value))


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=KeyboardStatus.highprice_departure.value))
def get_departure_date(call: CallbackQuery) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å id=4.
    –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ –≤—ã–µ–∑–¥–∞ –∏–∑ –æ—Ç–µ–ª—è –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞–∑–∞—Ç—å
    —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–µ—Ç.
    :param call: (CallbackQuery) –∫–æ–ª–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞—Ç–µ –≤—ã–µ–∑–¥–∞.
    """
    bot.set_state(call.message.chat.id, UserInfoHighPriceState.show_photoHigh)
    with bot.retrieve_data(call.message.chat.id) as data:
        user_arrival_date = data['arrival_date']
    result, key, step = DetailedTelegramCalendar(calendar_id=KeyboardStatus.highprice_departure.value,
                                                 min_date=user_arrival_date + timedelta(days=1),
                                                 max_date=user_arrival_date + timedelta(days=365),
                                                 locale="ru").process(call.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    elif result:
        with bot.retrieve_data(call.message.chat.id) as data:
            data['departure_date'] = result
            arrival_date = data['arrival_date']
            departure_date = data['departure_date']
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, f'üìà –î–∞—Ç–∞ –ø—Ä–∏–µ–∑–¥–∞: {arrival_date}\nüìâ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {departure_date}')
        bot.send_message(call.message.chat.id, 'üì∑ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª–µ–π?', reply_markup=show_photos_or_not())


@bot.message_handler(state=UserInfoHighPriceState.show_photoHigh)
def get_or_not_photos(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ—Ç–ª–∞–≤–ª–∏–≤–∞—é—â–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ "show_photoHigh".
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª "üëç –î–∞", —Ç–æ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª "üëé –ù–µ—Ç", —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ä–∞–Ω–Ω–µ–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
    :param message: (Message) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.
    """
    if message.text == 'üëç –î–∞':
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['show_photo'] = True
        bot.set_state(message.from_user.id, UserInfoHighPriceState.photos_to_showHigh, message.chat.id)
        bot.send_message(message.from_user.id, '‚ùî –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π')
    else:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['show_photo'] = False
            data['photos_to_show'] = 0
        find_hotels(message, sort_type='PRICE_HIGHEST_FIRST')
        bot.delete_state(message.from_user.id, message.chat.id)


@bot.message_handler(state=UserInfoHighPriceState.photos_to_showHigh)
def get_photos(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "photos_to_showHigh".
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å "üëç –î–∞".
    –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, –∞ —Ç–∞–∫ –∂–µ –∑–∞–ø–∏—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    –î–∞–ª–µ–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª–µ–π.
    :param message: (Message) —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç–µ–ª–µ–π.
    """
    if message.text.isdigit():
        if int(message.text) > 5:
            bot.send_message(message.from_user.id, 'üò¢ –Ø –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ –Ω–µ –±–æ–ª–µ–µ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π..')
        else:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['photos_to_show'] = int(message.text)
            find_hotels(message, sort_type='PRICE_HIGHEST_FIRST')
            bot.delete_state(message.from_user.id, message.chat.id)
    else:
        bot.send_message(message.from_user.id, 'üò° –¶–∏—Ñ—Ä–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!')
