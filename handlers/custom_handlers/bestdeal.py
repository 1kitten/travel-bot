from datetime import date, timedelta

from telebot.types import Message, CallbackQuery
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP

from hotel_api.api_request import parse_destinations, find_bestdeal
from keyboards.inline.calendar import arrival_keyboard, departure_keyboard
from keyboards.inline.clarify_destination import keyboard_with_destinations
from keyboards.reply.hotels_photos import show_photos_or_not
from loader import bot
from states.user import UserInfoBestDealsState


@bot.message_handler(commands=['bestdeal'])
def get_city(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/bestdeal"
    :param message:
    :return:
    """
    bot.set_state(message.from_user.id, UserInfoBestDealsState.cityBest, message.chat.id)
    bot.send_message(message.from_user.id, 'üèòÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:')


@bot.message_handler(state=UserInfoBestDealsState.cityBest)
def get_destination(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é "cityBest".
    :param message: (Message) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    bot.set_state(message.from_user.id, UserInfoBestDealsState.destinationBest, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['city'] = message.text
        destinations = parse_destinations(message.text)
        if destinations:
            bot.send_message(message.from_user.id, 'ü§î –£—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞:',
                             reply_markup=keyboard_with_destinations(destinations, fltr='bestdeal'))
        else:
            bot.send_message(message.from_user.id, '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æüíÄ\n'
                                                   '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.')


@bot.callback_query_handler(func=lambda call: call.data.startswith('bestdeal'))
def get_destination(call: CallbackQuery) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–ª–±–µ–∫ –æ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –ø—É–Ω–∫—Ç–∞–º–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.
    :param call: (CallbackQuery) –∫–æ–ª, –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É.
    """
    bot.set_state(call.message.chat.id, UserInfoBestDealsState.price_range)
    bot.send_message(call.message.chat.id, 'üí∞ –£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω USD$ (–Ω–∞–ø—Ä–∏–º–µ—Ä XXX-XXX): ')
    with bot.retrieve_data(call.message.chat.id) as data:
        data['destinationID'] = call.data.replace('bestdeal_', '')


@bot.message_handler(state=UserInfoBestDealsState.price_range)
def get_price_range(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é 'price_range'.
    :param message: (Message) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º —Ü–µ–Ω.
    """
    price_range = message.text.split('-')
    if len(price_range) != 2:
        bot.send_message(message.from_user.id, 'üò° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º.')
    else:
        try:
            int(price_range[0]), int(price_range[1])
        except ValueError:
            bot.send_message(message.from_user.id, 'üò° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–æ–¥–∏—Ç–µ —á–∏—Å–ª–∞.')
        else:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                if int(price_range[0]) > int(price_range[1]):
                    data['max_price'], data['min_price'] = int(price_range[0]), int(price_range[1])
                else:
                    data['max_price'], data['min_price'] = int(price_range[1]), int(price_range[0])
            bot.send_message(message.from_user.id, 'üèÉ –í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç–∞ –≥–æ—Ä–æ–¥–∞ (miles):')
            bot.set_state(message.from_user.id, UserInfoBestDealsState.center_distance, message.chat.id)


@bot.message_handler(state=UserInfoBestDealsState.center_distance)
def get_center_distance(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é "center_distance".
    :param message: (Message) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ–º –¥–æ —Ü–µ–Ω—Ç–∞.
    """
    try:
        int(message.text)
    except ValueError:
        bot.send_message(message.from_user.id, 'üò° –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.')
    else:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['distance_from_center'] = int(message.text)
        bot.set_state(message.from_user.id, UserInfoBestDealsState.hotels_to_showBest)
        bot.send_message(message.from_user.id, 'üè® –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–µ–ª–µ–π:')


@bot.message_handler(state=UserInfoBestDealsState.hotels_to_showBest)
def get_hotels_to_show(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é "hotels_to_showBest".
    :param message: (Message) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–ª-–≤–æ–º –æ—Ç–µ–ª–µ–π.
    """
    if message.text.isdigit():
        if int(message.text) > 10:
            bot.send_message(message.from_user.id, 'üò¢ –Ø –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ –Ω–µ –±–æ–ª–µ–µ 10 –æ—Ç–µ–ª–µ–π..')
        else:
            bot.set_state(message.from_user.id, UserInfoBestDealsState.arrival_dateBest)
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['hotels_to_show'] = int(message.text)
            bot.send_message(message.from_user.id, 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–µ–∑–¥–∞', reply_markup=arrival_keyboard(
                keyboard_id=5))
    else:
        bot.send_message(message.from_user.id, 'üò° –¶–∏—Ñ—Ä–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!')


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=5))
def get_arrival_date(call: CallbackQuery) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    :param call: (CallbackQuery) –Ω–∞–∂–∞—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–æ–π –ø—Ä–∏–µ–∑–¥–∞.
    """
    bot.set_state(call.message.chat.id, UserInfoBestDealsState.departure_dateBest)
    result, key, step = DetailedTelegramCalendar(calendar_id=5,
                                                 current_date=date.today(),
                                                 min_date=date.today(),
                                                 max_date=date.today() + timedelta(days=365),
                                                 locale="ru").process(call.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    else:
        with bot.retrieve_data(call.message.chat.id) as data:
            data['arrival_date'] = result
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, 'üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞', reply_markup=departure_keyboard(call,
                                                                                                         keyboard_id=6))


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=6))
def get_departure_date(call: CallbackQuery) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    :param call: (CallbackQuery) –Ω–∞–∂–∞—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–∞—Ç–æ–π –æ—Ç—ä–µ–∑–¥–∞.
    """
    bot.set_state(call.message.chat.id, UserInfoBestDealsState.show_photoBest)
    with bot.retrieve_data(call.message.chat.id) as data:
        user_arrival_date = data['arrival_date']
    result, key, step = DetailedTelegramCalendar(calendar_id=6,
                                                 min_date=user_arrival_date + timedelta(days=1),
                                                 max_date=user_arrival_date + timedelta(days=365),
                                                 locale="ru").process(call.data)
    if not result and key:
        bot.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {LSTEP[step]}",
                              call.message.chat.id,
                              call.message.message_id,
                              reply_markup=key)
    elif result:
        with bot.retrieve_data(call.message.chat.id) as data:
            data['departure_date'] = result
            arrival_date = data['arrival_date']
            departure_date = data['departure_date']
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, f'üìà –î–∞—Ç–∞ –ø—Ä–∏–µ–∑–¥–∞: {arrival_date}\nüìâ –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞: {departure_date}')
        bot.send_message(call.message.chat.id, 'üì∑ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–µ–ª–µ–π?', reply_markup=show_photos_or_not())


@bot.message_handler(state=UserInfoBestDealsState.show_photoBest)
def get_or_not_photos(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é "show_photoBest".
    :param message: (Message) –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if message.text == 'üëç –î–∞':
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['show_photo'] = True
        bot.set_state(message.from_user.id, UserInfoBestDealsState.photos_to_showBest)
        bot.send_message(message.from_user.id, '‚ùî –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π')
    else:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['show_photo'] = False
            data['photos_to_show'] = 0
        find_bestdeal(message)


@bot.message_handler(state=UserInfoBestDealsState.photos_to_showBest)
def get_photos(message: Message) -> None:
    """
    –•–µ–Ω–¥–ª–µ—Ä, –æ—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é "photos_to_showBest".
    :param message: (Message) —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    :return:
    """
    if message.text.isdigit():
        if int(message.text) > 5:
            bot.send_message(message.from_user.id, 'üò¢ –Ø –º–æ–≥—É –≤—ã–≤–µ—Å—Ç–∏ –Ω–µ –±–æ–ª–µ–µ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π..')
        else:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['photos_to_show'] = int(message.text)
            find_bestdeal(message)
    else:
        bot.send_message(message.from_user.id, 'üò° –¶–∏—Ñ—Ä–∞–º–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!')
